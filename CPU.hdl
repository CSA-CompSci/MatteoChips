// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
	
    PARTS:
	Not(in=instruction[15], out=notinstruct);
    Not(in=notinstruct, out=notnotinstruct);
    And(a=notnotinstruct, b=instruction[5], out=out1);    //Uses the instruction bit and uses nots and ands to select whether A or C register is wanted
    Mux16(a=instruction, b=out2, sel=out1, out=out3);
    Or(a=notinstruct, b=out1, out=load1);    //Uses the Or gate to determine whether A or C command was used
    ARegister(in=out3, load=load1, out=out4);
    Mux16(a=out4, b=inM, sel=instruction[12], out=out5);   //Calls a Mux and an instruction bit to determine whether it was A or M
    And(a=notnotinstruct, b=instruction[4], out=load2);
    DRegister(in=out2, load=load2, out=out6);    //Uses the D Register bit to call whatever was in D Register
    ALU(x=out6, y=out5, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=out2, zr=out7, ng=out8); // calculate
    Or16(a=false, b=out4, out[0..14]=addressM);
    Or16(a=false, b=out2, out=outM);
    And(a=notnotinstruct, b=instruction[3], out=writeM);
    And(a=out7, b=instruction[1], out=jump1);    //Uses And to tell the computer to jump if Zero
    And(a=out8, b=instruction[2], out=jump2);    //Uses And to tell the computer to jump if Negative
    Or(a=out7, b=out8, out=not1);
    Not(in=not1, out=not2);            //Not is used to tell it to jump regardless
    And(a=not2, b=instruction[0], out=jump3); //Tells it with And to Jump
    Or(a=jump1, b=jump2, out=jump4);
    Or(a=jump4, b=jump3, out=jump5);              //Combines the jumps to prepare the PC being called with Ors
    And(a=notnotinstruct, b=jump5, out=load3); //Tells to jump if/for C instructions
    Not(in=load3, out=inc1);                  //Uses a Not to create an incrementer for the computer
    PC(in=out4, inc=inc1, load=load3, reset=reset, out[0..14]=pc);
}
